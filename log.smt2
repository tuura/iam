** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
[SEND] (get-value (s1))
[RECV] ((s1 #x0001))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvurem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xa000))
[SEND] (get-value (s1))
[RECV] ((s1 #x6000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s2 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x8000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s2 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x8000))
[SEND] (get-value (s1))
[RECV] ((s1 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (and s5 s5))
[GOOD] (assert s6)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (and s5 s5))
[GOOD] (assert s6)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (and s5 s5))
[GOOD] (define-fun s7 () Bool (and s5 s6))
[GOOD] (assert s7)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (and s5 s5))
[GOOD] (define-fun s7 () Bool (and s5 s6))
[GOOD] (assert s7)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s5))
[GOOD] (define-fun s10 () Bool (and s8 s9))
[GOOD] (assert s10)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s5))
[GOOD] (define-fun s10 () Bool (and s8 s9))
[GOOD] (assert s10)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (and s5 s5))
[GOOD] (assert s6)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (and s5 s5))
[GOOD] (assert s6)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (and s5 s5))
[GOOD] (define-fun s7 () Bool (and s5 s6))
[GOOD] (assert s7)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (and s5 s5))
[GOOD] (define-fun s7 () Bool (and s5 s6))
[GOOD] (assert s7)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s5))
[GOOD] (define-fun s10 () Bool (and s8 s9))
[GOOD] (assert s10)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s5))
[GOOD] (define-fun s10 () Bool (and s8 s9))
[GOOD] (assert s10)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (define-fun s9 () Bool (and s5 s8))
[GOOD] (assert s9)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_1)
[SEND] (check-sat)
[RECV] sat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (assert s5)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x0000))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s1 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () Bool (= s0 s1))
[GOOD] (define-fun s4 () (_ BitVec 16) (ite s2 s3 s1))
[GOOD] (define-fun s5 () Bool (distinct s1 s4))
[GOOD] (define-fun s6 () Bool (not s5))
[GOOD] (define-fun s7 () (_ BitVec 16) (ite s6 s3 s1))
[GOOD] (define-fun s8 () Bool (distinct s1 s7))
[GOOD] (assert s8)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #xffff))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (= s1 s3))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (not s10))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (and s7 s13))
[GOOD] (assert s14)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x7470))
[SEND] (get-value (s1))
[RECV] ((s1 #x0090))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s3 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s5 () (_ BitVec 16) #x0001)
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s2 () (_ BitVec 16) (bvsrem s0 s1))
[GOOD] (define-fun s4 () Bool (= s2 s3))
[GOOD] (define-fun s6 () (_ BitVec 16) (ite s4 s5 s3))
[GOOD] (define-fun s7 () Bool (distinct s3 s6))
[GOOD] (define-fun s8 () Bool (not s7))
[GOOD] (define-fun s9 () (_ BitVec 16) (ite s8 s5 s3))
[GOOD] (define-fun s10 () Bool (distinct s3 s9))
[GOOD] (define-fun s11 () Bool (= s1 s3))
[GOOD] (define-fun s12 () (_ BitVec 16) (ite s11 s5 s3))
[GOOD] (define-fun s13 () Bool (distinct s3 s12))
[GOOD] (define-fun s14 () Bool (not s13))
[GOOD] (define-fun s15 () (_ BitVec 16) (ite s14 s5 s3))
[GOOD] (define-fun s16 () Bool (distinct s3 s15))
[GOOD] (define-fun s17 () Bool (and s10 s16))
[GOOD] (assert s17)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x3fff))
[SEND] (get-value (s1))
[RECV] ((s1 #xfffe))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] ; --- skolem constants ---
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (assert s_2)
[SEND] (check-sat)
[RECV] unsat
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
** Calling: z3 -nw -in -smt2
[GOOD] ; Automatically generated by SBV. Do not edit.
[GOOD] (set-option :print-success true)
[GOOD] (set-option :global-declarations true)
[GOOD] (set-option :smtlib2_compliant true)
[GOOD] (set-option :diagnostic-output-channel "stdout")
[GOOD] (set-option :produce-models true)
[GOOD] (set-logic QF_BV)
[GOOD] ; --- uninterpreted sorts ---
[GOOD] ; --- literal constants ---
[GOOD] (define-fun s_2 () Bool false)
[GOOD] (define-fun s_1 () Bool true)
[GOOD] (define-fun s2 () (_ BitVec 16) #x0000)
[GOOD] (define-fun s4 () (_ BitVec 16) #x0001)
[GOOD] (define-fun s7 () (_ BitVec 16) #x7fff)
[GOOD] (define-fun s18 () (_ BitVec 16) (bvneg #x8000))
[GOOD] ; --- skolem constants ---
[GOOD] (declare-fun s0 () (_ BitVec 16)) ; tracks user variable "val_0"
[GOOD] (declare-fun s1 () (_ BitVec 16)) ; tracks user variable "val_1"
[GOOD] ; --- constant tables ---
[GOOD] ; --- skolemized tables ---
[GOOD] ; --- arrays ---
[GOOD] ; --- uninterpreted constants ---
[GOOD] ; --- user given axioms ---
[GOOD] ; --- formula ---
[GOOD] (define-fun s3 () Bool (bvsgt s1 s2))
[GOOD] (define-fun s5 () (_ BitVec 16) (ite s3 s4 s2))
[GOOD] (define-fun s6 () Bool (distinct s2 s5))
[GOOD] (define-fun s8 () (_ BitVec 16) (bvsub s7 s1))
[GOOD] (define-fun s9 () Bool (bvsgt s0 s8))
[GOOD] (define-fun s10 () (_ BitVec 16) (ite s9 s4 s2))
[GOOD] (define-fun s11 () Bool (distinct s2 s10))
[GOOD] (define-fun s12 () Bool (and s6 s11))
[GOOD] (define-fun s13 () (_ BitVec 16) (ite s12 s4 s2))
[GOOD] (define-fun s14 () Bool (distinct s2 s13))
[GOOD] (define-fun s15 () Bool (bvslt s1 s2))
[GOOD] (define-fun s16 () (_ BitVec 16) (ite s15 s4 s2))
[GOOD] (define-fun s17 () Bool (distinct s2 s16))
[GOOD] (define-fun s19 () (_ BitVec 16) (bvsub s18 s1))
[GOOD] (define-fun s20 () Bool (bvslt s0 s19))
[GOOD] (define-fun s21 () (_ BitVec 16) (ite s20 s4 s2))
[GOOD] (define-fun s22 () Bool (distinct s2 s21))
[GOOD] (define-fun s23 () Bool (and s17 s22))
[GOOD] (define-fun s24 () (_ BitVec 16) (ite s23 s4 s2))
[GOOD] (define-fun s25 () Bool (distinct s2 s24))
[GOOD] (define-fun s26 () Bool (or s14 s25))
[GOOD] (define-fun s27 () (_ BitVec 16) (ite s26 s4 s2))
[GOOD] (define-fun s28 () Bool (= s4 s27))
[GOOD] (define-fun s29 () (_ BitVec 16) (ite s28 s4 s2))
[GOOD] (define-fun s30 () Bool (distinct s2 s29))
[GOOD] (assert s30)
[SEND] (check-sat)
[RECV] sat
[SEND] (get-value (s0))
[RECV] ((s0 #x2000))
[SEND] (get-value (s1))
[RECV] ((s1 #x7600))
*** Solver   : Z3
*** Exit code: ExitSuccess
